/**
 * 用户CQRS控制器示例
 *
 * 演示如何使用CQRS接口基础设施创建完整的用户管理API。
 * 包含命令端点、查询端点、权限控制、审计日志等完整功能。
 *
 * @description 用户CQRS控制器示例展示了CQRS接口的完整使用方法
 *
 * @example
 * ```typescript
 * // 在模块中注册
 * @Module({
 *   controllers: [UserCqrsController],
 *   providers: [
 *     // CQRS基础设施
 *     CoreCQRSBus,
 *     // 权限检查器
 *     DefaultPermissionChecker,
 *   ],
 * })
 * export class UserModule {}
 * ```
 *
 * @since 1.0.0
 */

import {
  Controller,
  Post,
  Get,
  Put,
  Delete,
  Body,
  Param,
  Query,
  UseGuards,
  UsePipes,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';
import { BaseCommandController, BaseQueryController } from '../base';
import {
  CommandEndpoint,
  QueryEndpoint,
  TenantContext,
  UserContext,
  RequestContext,
  type ITenantContext,
  type IUserContext,
  type IRequestContext,
} from '../decorators';
import { CqrsPermissionGuard } from '../guards';
import { CqrsValidationPipe } from '../pipes';
import type { ICQRSBus } from '../../../../application/cqrs/bus/core-cqrs-bus';

/**
 * 创建用户DTO示例
 */
interface CreateUserDto {
  name: string;
  email: string;
  role?: string;
}

/**
 * 更新用户DTO示例
 */
interface UpdateUserDto {
  name?: string;
  email?: string;
  role?: string;
}

/**
 * 获取用户查询DTO示例
 */
interface GetUsersQueryDto {
  page?: number;
  limit?: number;
  search?: string;
  role?: string;
  status?: string;
}

/**
 * 用户响应DTO示例
 */
interface UserResponseDto {
  id: string;
  name: string;
  email: string;
  role: string;
  status: string;
  tenantId: string;
  createdAt: string;
  updatedAt: string;
}

/**
 * 创建用户命令示例
 */
class CreateUserCommand {
  constructor(
    public readonly name: string,
    public readonly email: string,
    public readonly role: string,
    public readonly tenantId: string,
    public readonly userId: string,
  ) {}

  get commandType(): string {
    return 'CreateUser';
  }
}

/**
 * 获取用户查询示例
 */
class GetUserQuery {
  constructor(
    public readonly userId: string,
    public readonly tenantId: string,
  ) {}

  get queryType(): string {
    return 'GetUser';
  }
}

/**
 * 获取用户列表查询示例
 */
class GetUsersQuery {
  constructor(
    public readonly filters: Record<string, unknown>,
    public readonly pagination: { page: number; limit: number },
    public readonly tenantId: string,
  ) {}

  get queryType(): string {
    return 'GetUsers';
  }
}

/**
 * 用户命令控制器示例
 *
 * @description 演示命令端点的实现
 */
@Controller('api/v1/users')
@ApiTags('用户管理 - 命令')
@UseGuards(CqrsPermissionGuard)
@UsePipes(new CqrsValidationPipe())
export class UserCommandController extends BaseCommandController {
  constructor(cqrsBus: ICQRSBus) {
    super(cqrsBus, 'UserCommandController');
  }

  /**
   * 创建用户
   */
  @Post()
  @CommandEndpoint({
    command: CreateUserCommand,
    description: '创建新用户',
    permissions: ['user:create'],
    audit: {
      operation: 'create',
      resourceType: 'user',
      logRequest: true,
      logResponse: true,
    },
    timeout: {
      execution: 5000,
      alertOnTimeout: true,
    },
    retry: {
      maxAttempts: 3,
      backoffStrategy: 'exponential',
      baseDelay: 1000,
    },
  })
  @ApiOperation({ summary: '创建用户' })
  @ApiResponse({ status: 201, description: '用户创建成功' })
  @ApiResponse({ status: 400, description: '请求参数无效' })
  @ApiResponse({ status: 403, description: '权限不足' })
  async createUser(
    @Body() dto: CreateUserDto,
    @TenantContext() tenant: ITenantContext,
    @UserContext() user: IUserContext,
    @RequestContext() request: IRequestContext,
  ) {
    return this.executeCommand(
      CreateUserCommand,
      dto,
      { tenant, user, request },
      {
        timeout: 5000,
        validation: {
          skipBusinessRules: false,
        },
      },
    );
  }

  /**
   * 更新用户
   */
  @Put(':id')
  @CommandEndpoint({
    command: CreateUserCommand, // 实际应该是UpdateUserCommand
    description: '更新用户信息',
    permissions: ['user:update'],
    audit: {
      operation: 'update',
      resourceType: 'user',
      logRequest: true,
      logResponse: true,
    },
  })
  @ApiOperation({ summary: '更新用户' })
  @ApiResponse({ status: 200, description: '用户更新成功' })
  async updateUser(
    @Param('id') id: string,
    @Body() dto: UpdateUserDto,
    @TenantContext() tenant: ITenantContext,
    @UserContext() user: IUserContext,
    @RequestContext() request: IRequestContext,
  ) {
    const updateDto = { ...dto, id };
    return this.executeCommand(
      CreateUserCommand, // 实际应该是UpdateUserCommand
      updateDto,
      { tenant, user, request },
    );
  }

  /**
   * 删除用户
   */
  @Delete(':id')
  @CommandEndpoint({
    command: CreateUserCommand, // 实际应该是DeleteUserCommand
    description: '删除用户',
    permissions: ['user:delete'],
    audit: {
      operation: 'delete',
      resourceType: 'user',
      logRequest: true,
      logResponse: false,
    },
  })
  @ApiOperation({ summary: '删除用户' })
  @ApiResponse({ status: 200, description: '用户删除成功' })
  async deleteUser(
    @Param('id') id: string,
    @TenantContext() tenant: ITenantContext,
    @UserContext() user: IUserContext,
    @RequestContext() request: IRequestContext,
  ) {
    return this.executeCommand(
      CreateUserCommand, // 实际应该是DeleteUserCommand
      { id },
      { tenant, user, request },
    );
  }
}

/**
 * 用户查询控制器示例
 *
 * @description 演示查询端点的实现
 */
@Controller('api/v1/users')
@ApiTags('用户管理 - 查询')
@UseGuards(CqrsPermissionGuard)
export class UserQueryController extends BaseQueryController {
  constructor(cqrsBus: ICQRSBus) {
    super(cqrsBus, 'UserQueryController');
  }

  /**
   * 获取用户列表
   */
  @Get()
  @QueryEndpoint({
    query: GetUsersQuery,
    description: '获取用户列表',
    permissions: ['user:read'],
    cache: {
      ttl: 300,
      keyPrefix: 'users',
      condition: (result) => result !== null,
      invalidateOn: ['user:created', 'user:updated', 'user:deleted'],
    },
    pagination: {
      defaultLimit: 20,
      maxLimit: 100,
      allowDisable: false,
    },
    sorting: {
      defaultSort: 'createdAt:desc',
      allowedFields: ['name', 'email', 'createdAt', 'updatedAt'],
    },
    filtering: {
      allowedFields: ['name', 'email', 'role', 'status'],
      operators: ['eq', 'like', 'in', 'between'],
    },
  })
  @ApiOperation({ summary: '获取用户列表' })
  @ApiResponse({ status: 200, description: '获取成功' })
  async getUsers(
    @Query() dto: GetUsersQueryDto,
    @TenantContext() tenant: ITenantContext,
    @UserContext() user: IUserContext,
  ) {
    return this.executeQuery(
      GetUsersQuery,
      dto,
      { tenant, user },
      {
        cache: {
          enabled: true,
          ttl: 300,
        },
        pagination: {
          page: dto.page || 1,
          limit: dto.limit || 20,
          maxLimit: 100,
        },
      },
    );
  }

  /**
   * 获取用户详情
   */
  @Get(':id')
  @QueryEndpoint({
    query: GetUserQuery,
    description: '获取用户详情',
    permissions: ['user:read'],
    cache: {
      ttl: 600,
      keyPrefix: 'user',
    },
  })
  @ApiOperation({ summary: '获取用户详情' })
  @ApiResponse({ status: 200, description: '获取成功' })
  @ApiResponse({ status: 404, description: '用户不存在' })
  async getUser(
    @Param('id') id: string,
    @TenantContext() tenant: ITenantContext,
    @UserContext() user: IUserContext,
  ) {
    return this.executeQuery(
      GetUserQuery,
      { userId: id },
      { tenant, user },
      {
        cache: {
          enabled: true,
          ttl: 600,
        },
      },
    );
  }
}
